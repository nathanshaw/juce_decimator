/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
BitCrusherAudioProcessor::BitCrusherAudioProcessor()
{
    
    // Let's instantiate out audio parameter as a float parameter, and pass it into
    // the addParameter function so that it's automatically handled for us, through
    // the host.
    
    // We have a couple ways we can create it...
    
    // Option 1: Use min max and default value
    //addParameter(gainParam = new AudioParameterFloat("gainParam", "Gain", 0.0, 1.0, 1.0);
    
    // Option 2: Use the NormalisedRange object which allows us to set a range, get
    // normalized vales between 0,1 for the host, and also let's us skew the range
    // to be non-linear
    NormalisableRange<float> gainRange(0.0, 1.0, 0.1, 1.0);
    NormalisableRange<float> effectRange(1.0, 100.0, 10.0, 100.0);
    addParameter(gainParam = new AudioParameterFloat("gainParam", "Gain" , gainRange,1.0));
    addParameter(effectParam = new AudioParameterFloat("effectParam", "Effect", effectRange, 100.0));

}

BitCrusherAudioProcessor::~BitCrusherAudioProcessor()
{
}

//==============================================================================
const String BitCrusherAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

const String BitCrusherAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String BitCrusherAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool BitCrusherAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool BitCrusherAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool BitCrusherAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool BitCrusherAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool BitCrusherAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double BitCrusherAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int BitCrusherAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int BitCrusherAudioProcessor::getCurrentProgram()
{
    return 0;
}

void BitCrusherAudioProcessor::setCurrentProgram (int index)
{
}

const String BitCrusherAudioProcessor::getProgramName (int index)
{
    return String();
}

void BitCrusherAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void BitCrusherAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void BitCrusherAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void BitCrusherAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const int numSamples = buffer.getNumSamples();
    const float gain = gainParam->getValue();
    const float effect = effectParam->getValue();
    int factor = (int)(effect * 100);
    buffer.applyGain(gain);
    
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, numSamples);
    
    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer (channel);
        // map factor to a knob
        for (int i = factor; i < numSamples; i = i + factor){
            for (int j = 0; j < factor; j++){
                channelData[i+j] = channelData[i];
            }
        }
    }
}

//==============================================================================
bool BitCrusherAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* BitCrusherAudioProcessor::createEditor()
{
    return new BitCrusherAudioProcessorEditor (*this);
}

//==============================================================================
void BitCrusherAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void BitCrusherAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new BitCrusherAudioProcessor();
}
