/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
BitCrusherAudioProcessorEditor::BitCrusherAudioProcessorEditor (BitCrusherAudioProcessor& p)
    : AudioProcessorEditor (&p),
        processor (p),
        inputGainSlider("Input Gain"),
        outputGainSlider("Output Gain"),
        effectSlider1("Effect1"),
        holdRadio("Hold"),
        holdIntRadio("HoldInt"),
        clipRadio("Clip"),
        hardClipRadio("HardClip"),
        halfRectifyRadio("HalfRect"),
        fullRectifyRadio("FullRect"),
        spaceRadio1("Space1"),
        spaceRadio2("Space2"),
        fuzzRadio1("Fuzz1"),
        fuzzRadio2("Fuzz2"),
        distortionRadio1("Distortion1"),
        distortionRadio2("Distortion2"),
        cleanRadio("Clean")
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (575, 250);
    LookAndFeel::setDefaultLookAndFeel(&myLookAndFeel);
    
    // ------------------ create some buttons -------------------------------
    addAndMakeVisible(halfRectifyRadio);
    addAndMakeVisible(fullRectifyRadio);
    addAndMakeVisible(clipRadio);
    addAndMakeVisible(hardClipRadio);
    addAndMakeVisible(holdRadio);
    addAndMakeVisible(spaceRadio1);
    addAndMakeVisible(spaceRadio2);
    addAndMakeVisible(holdIntRadio);
    addAndMakeVisible(fuzzRadio1);
    addAndMakeVisible(fuzzRadio2);
    addAndMakeVisible(distortionRadio1);
    addAndMakeVisible(distortionRadio2);
    addAndMakeVisible(cleanRadio);
    
    fullRectifyRadio.setRadioGroupId(1);
    halfRectifyRadio.setRadioGroupId(1);
    clipRadio.setRadioGroupId(1);
    hardClipRadio.setRadioGroupId(1);
    holdRadio.setRadioGroupId(1);
    holdIntRadio.setRadioGroupId(1);
    spaceRadio1.setRadioGroupId(1);
    spaceRadio2.setRadioGroupId(1);
    fuzzRadio1.setRadioGroupId(1);
    fuzzRadio2.setRadioGroupId(1);
    distortionRadio1.setRadioGroupId(1);
    distortionRadio2.setRadioGroupId(1);
    cleanRadio.setRadioGroupId(1);
    
    halfRectifyRadio.setBoundsRelative(0.02, 0.66, 0.1, 0.14);
    fullRectifyRadio.setBoundsRelative(0.02, 0.80, 0.1, 0.14);
    holdRadio.setBoundsRelative(0.12, 0.66, 0.1, 0.14);
    holdIntRadio.setBoundsRelative(0.12, 0.80, 0.1, 0.14);
    clipRadio.setBoundsRelative(0.22, 0.66, 0.1, 0.14);
    hardClipRadio.setBoundsRelative(0.22, 0.80, 0.1, 0.14);
    spaceRadio1.setBoundsRelative(0.32, 0.66, 0.1, 0.14);
    spaceRadio2.setBoundsRelative(0.32, 0.8, 0.1, 0.14);
    fuzzRadio1.setBoundsRelative(0.42, 0.66, 0.1, 0.14);
    fuzzRadio2.setBoundsRelative(0.42, 0.8, 0.1, 0.14);
    distortionRadio1.setBoundsRelative(0.52, 0.66, 0.1, 0.14);
    distortionRadio2.setBoundsRelative(0.52, 0.8, 0.1, 0.14);
    cleanRadio.setBoundsRelative(0.68, 0.70, 0.14, 0.18);
    
    halfRectifyRadio.addListener(this);
    fullRectifyRadio.addListener(this);
    holdRadio.addListener(this);
    holdIntRadio.addListener(this);
    clipRadio.addListener(this);
    hardClipRadio.addListener(this);
    spaceRadio1.addListener(this);
    spaceRadio2.addListener(this);
    fuzzRadio1.addListener(this);
    fuzzRadio2.addListener(this);
    distortionRadio1.addListener(this);
    distortionRadio2.addListener(this);
    cleanRadio.addListener(this);
    
    holdRadio.setToggleState(true, dontSendNotification);
    
    // -----------------------------------------------------------------------
    effectSlider1.setTextBoxStyle(Slider::NoTextBox, true, 100, 15);
    effectSlider1.setSliderStyle(Slider::Rotary);
    effectSlider1.setRange(0.1, 1.0);
    effectSlider1.addListener(this);
    //Add the slider as a child component of this component and make it visible
    addAndMakeVisible(effectSlider1);
    
    effectSlider1Label.setText("Intensity", dontSendNotification);
    effectSlider1Label.setColour(juce::Label::textColourId,
                          juce::Colour(255.0f,100.0f,50.0f));
    effectSlider1Label.attachToComponent(&effectSlider1, false);
    effectSlider1Label.setJustificationType(Justification::centredTop);
    addAndMakeVisible(effectSlider1Label);
    
    inputGainSlider.setTextBoxStyle(Slider::NoTextBox, true, 100, 15);
    inputGainSlider.setSliderStyle(Slider::Rotary);
    inputGainSlider.setRange(0.5, 2.0);
    inputGainSlider.addListener(this);
    addAndMakeVisible(inputGainSlider);
    
    outputGainSlider.setTextBoxStyle(Slider::NoTextBox, true, 100, 15);
    outputGainSlider.setSliderStyle(Slider::Rotary);
    outputGainSlider.setRange(0.5, 2.0);
    outputGainSlider.addListener(this);
    addAndMakeVisible(outputGainSlider);
    
    inputGainSliderLabel.setText("Input Gain", dontSendNotification);
    inputGainSliderLabel.setColour(juce::Label::textColourId,
                                 juce::Colour(255.0f,100.0f,50.0f));
    inputGainSliderLabel.attachToComponent(&inputGainSlider, false);
    inputGainSliderLabel.setJustificationType(Justification::centredTop);
    addAndMakeVisible(inputGainSliderLabel);
    
    outputGainSliderLabel.setText("Output Gain", dontSendNotification);
    outputGainSliderLabel.setColour(juce::Label::textColourId,
                                   juce::Colour(255.0f,100.0f,50.0f));
    outputGainSliderLabel.attachToComponent(&outputGainSlider, false);
    outputGainSliderLabel.setJustificationType(Justification::centredTop);
    addAndMakeVisible(outputGainSliderLabel);
    

    // Manually call the timerCallback() once so that the sliders and UI updates
    // before the window is open. This is a trick.
    timerCallback();
    // Start the timer which will be called (roughly) at 30Hz
    startTimer(30);
}

BitCrusherAudioProcessorEditor::~BitCrusherAudioProcessorEditor()
{
}

//==============================================================================
void BitCrusherAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colour(0,0,0));
    g.setGradientFill(ColourGradient(
            Colour(255,255,255), 0, 0, Colour(211,211,211), 600, 0, false));
}

void BitCrusherAudioProcessorEditor::resized()
{
    inputGainSlider.setBoundsRelative(0.01, 0.05, 0.18, 0.18);
    effectSlider1.setBoundsRelative(0.13, 0.05, 0.18, 0.18);
    outputGainSlider.setBoundsRelative(0.25, 0.05, 0.18, 0.18);
}

void BitCrusherAudioProcessorEditor::timerCallback(){
    inputGainSlider.setValue(processor.inputGainParam->getValue(), dontSendNotification);
    effectSlider1.setValue(processor.effectParam1->getValue(), dontSendNotification);
    outputGainSlider.setValue(processor.outputGainParam->getValue(), dontSendNotification);
}

void BitCrusherAudioProcessorEditor::sliderValueChanged (Slider* sliderThatHasChanged){
    
    switch (sliderThatHasChanged) {
        
        case &inputGainSlider:
            processor.inputGainParam->beginChangeGesture();
            processor.inputGainParam->setValueNotifyingHost(sliderThatHasChanged->getValue());
            processor.inputGainParam->endChangeGesture();
            break;
            
        case &outputGainSlider:
            processor.outputGainParam->beginChangeGesture();
            processor.outputGainParam->setValueNotifyingHost(sliderThatHasChanged->getValue());
            processor.outputGainParam->endChangeGesture();
            break;
            
        case &effectSlider1:
            processor.effectParam1->beginChangeGesture();
            processor.effectParam1->setValueNotifyingHost(sliderThatHasChanged->getValue());
            processor.effectParam1->endChangeGesture();
            break;
    }
}

void BitCrusherAudioProcessorEditor::buttonClicked (Button* buttonThatHasBeenClicked) {
    //check to see what button was clicked
    switch (buttonThatHasBeenClicked) {
        
        case &holdRadio:
            processor.effectSelectParam->setValue(SAMPLE_HOLDER);
            holdRadio.setToggleState(true, dontSendNotification);
            break;
        
        case &holdIntRadio:
            processor.effectSelectParam->setValue(SAMPLE_HOLDER_INT);
            holdIntRadio.setToggleState(true, dontSendNotification);
            break;
        
        case &halfRectifyRadio:
            processor.effectSelectParam->setValue(HALF_RECTIFY);
            halfRectifyRadio.setToggleState(true, dontSendNotification);
            break;
        
        case &fullRectifyRadio:
            processor.effectSelectParam->setValue(FULL_RECTIFY);
            fullRectifyRadio.setToggleState(true, dontSendNotification);
            break;
            
        case &clipRadio:
            processor.effectSelectParam->setValue(CLIP_DISTORTION);
            clipRadio.setToggleState(true, dontSendNotification);
            break;
            
        case &hardClipRadio:
            processor.effectSelectParam->setValue(HARD_CLIP_DISTORTION);
            hardClipRadio.setToggleState(true, dontSendNotification);
            break;
            
        case &spaceRadio1:
            processor.effectSelectParam->setValue(SPACE_DISTORTION1);
            spaceRadio1.setToggleState(true, dontSendNotification);
            break;
            
        case &spaceRadio2:
            processor.effectSelectParam->setValue(SPACE_DISTORTION2);
            spaceRadio2.setToggleState(true, dontSendNotification);
            break;
            
        case &fuzzRadio1:
            processor.effectSelectParam->setValue(FUZZ1);
            fuzzRadio1.setToggleState(true, dontSendNotification);
            break;
            
        case &fuzzRadio2:
            processor.effectSelectParam->setValue(FUZZ2);
            fuzzRadio2.setToggleState(true, dontSendNotification);
            break;
            
        case &distortionRadio1:
            processor.effectSelectParam->setValue(DISTORTION1);
            distortionRadio1.setToggleState(true, dontSendNotification);
            break;
            
        case &distortionRadio2:
            processor.effectSelectParam->setValue(DISTORTION2);
            distortionRadio2.setToggleState(true, dontSendNotification);
            break;
            
        case &cleanRadio:
            processor.effectSelectParam->setValue(CLEAN);
            cleanRadio.setToggleState(true, dontSendNotification);
            break;
    }
}
